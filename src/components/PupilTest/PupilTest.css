:root {
  --primary: #5d5cde;
  --primary-dark: #4b4aca;
  --text: #333;
  --background: #f8f9fa;
  --card-bg: #fff;
  --border: #e0e0e0;
  
  --response-strong: #27ae60; 
  --response-moderate: #58cc86; 
  --response-reduced: #f39c12; 
  --response-minimal: #e74c3c; 
  --response-na: #7f8c8d; 

  --correct: var(--response-strong); 
  --incorrect: var(--response-minimal); 
  --warning: var(--response-reduced); 

  --secondary-button-bg: #6c757d;
  --secondary-button-hover-bg: #5a6268;
  
  --dark-overlay-bg: rgb(0, 0, 0);
  --ring-color: rgba(200, 0, 0, 0.25);
  
  --dim-overlay-text-primary: rgba(160, 160, 160, 0.85);
  --dim-overlay-text-secondary: rgba(180, 180, 180, 0.9);
  --dim-overlay-strong: rgba(170, 170, 170, 0.9);
  --dim-warning-text-on-dark: rgba(210, 140, 60, 0.85);

  --dim-button-bg-on-dark: rgba(60, 60, 90, 0.75);
  --dim-button-hover-bg-on-dark: rgba(80, 80, 110, 0.85);
  --dim-button-text-on-dark: var(--dim-overlay-text-secondary);
}

body {
  background-color: var(--background);
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,
    Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

.pupil-test-container {
  max-width: 600px;
  margin: 1rem auto;
  padding: 1.5rem;
  background: var(--card-bg);
  border-radius: 12px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  overflow-y: auto;
  max-height: 90vh;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.hidden-video {
  display: none !important;
  position: absolute !important;
  width: 0 !important;
  height: 0 !important;
  opacity: 0 !important;
  pointer-events: none !important;
  z-index: -1 !important;
}

.full-black-overlay, .full-flash-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  z-index: 9990; /* MODIFIED: Increased z-index */
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
}

.full-black-overlay {
  background: var(--dark-overlay-bg);
}

.full-flash-overlay {
  background: #fff;
}

.overlay-text {
  color: var(--dim-overlay-text-primary);
  font-size: 1rem;
  text-align: center;
  margin-bottom: 1rem;
  max-width: 80%;
  margin-left: auto;
  margin-right: auto;
}

.calibration-overlay-content-wrapper {
  pointer-events: auto;
  position: relative;
  z-index: 9991; /* MODIFIED: Increased z-index (relative to its parent overlay) */
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-align: center;
  padding: 2rem;
  box-sizing: border-box;
  gap: 1rem;
  width: 100%;
  height: 100%;
  overflow-y: auto;
}

.calibration-overlay-content-wrapper h3 {
  color: var(--dim-overlay-text-secondary);
  font-size: 1.6rem;
  margin-bottom: 0.5rem;
}

.calibration-overlay-content-wrapper p {
  color: var(--dim-overlay-text-primary);
  font-size: 1rem;
  max-width: 80%;
  line-height: 1.6;
  margin-left: auto;
  margin-right: auto;
}

.calibration-overlay-content-wrapper .calibration-feedback {
  margin-top: 1rem;
  width: 100%;
}
.calibration-overlay-content-wrapper .calibration-feedback p {
  color: var(--dim-overlay-text-primary);
  margin: 0.3rem auto;
  text-align: center;
}
.calibration-overlay-content-wrapper .calibration-feedback strong {
  color: var(--dim-overlay-strong);
}

.calibration-overlay-content-wrapper .warning-text {
  color: var(--dim-warning-text-on-dark);
}

.calibration-overlay-content-wrapper .error-message {
  background: rgba(210, 140, 60, 0.1);
  border: 1px solid var(--dim-warning-text-on-dark);
  color: var(--dim-warning-text-on-dark);
  padding: 0.8rem;
  border-radius: 6px;
  margin-top: 0.5rem;
  max-width: 90%;
  margin-left: auto;
  margin-right: auto;
}

.ring-indicator {
  width: 140px;
  height: 140px;
  border: 3px solid var(--ring-color);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-top: 1rem;
  margin-bottom: 1rem;
  /* position: relative; /* If it ever needs a z-index within the wrapper */
  /* z-index: 1;      /* Example: ensure it's below buttons if they overlap */
}

.pupil-dot {
  border-radius: 50%;
}

.live-feedback {
  position: absolute;
  bottom: 20px;
  left: 50%;
  transform: translateX(-50%);
  background: rgba(40,40,40,0.65);
  color: var(--dim-overlay-strong);
  padding: 0.4rem 0.9rem;
  border-radius: 20px;
  font-size: 0.9rem;
  z-index: 5; /* Ensure it's above the ring if they could overlap by chance */
}

.error-message.overlay-error {
  position: absolute;
  bottom: 70px;
  left: 50%;
  transform: translateX(-50%);
  width: 80%;
  max-width: 400px;
  background: rgba(210, 140, 60, 0.1);
  border: 1px solid var(--dim-warning-text-on-dark);
  color: var(--dim-warning-text-on-dark);
  text-align: center;
  z-index: 5; /* Ensure it's above the ring if they could overlap */
}

.primary-button {
  background: var(--primary);
  color: white;
  border: none;
  padding: 0.8rem 1.5rem;
  border-radius: 8px;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.2s, transform 0.2s, color 0.2s, border-color 0.2s;
  margin-top: 1rem;
  position: relative; /* For z-index context within its parent */
}
.primary-button:hover {
  background: var(--primary-dark);
  transform: translateY(-1px);
}
.primary-button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  transform: translateY(0);
}

.secondary-button {
  background: var(--secondary-button-bg);
  color: white;
  border: none;
  padding: 0.8rem 1.5rem;
  border-radius: 8px;
  font-size: 1rem;
  cursor: pointer;
  transition: background-color 0.2s, transform 0.2s;
  margin-top: 1rem;
  position: relative; /* For z-index context within its parent */
}
.secondary-button:hover {
  background: var(--secondary-button-hover-bg);
  transform: translateY(-1px);
}
.secondary-button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  transform: translateY(0);
}

/* Styles for buttons specifically within the calibration overlay */
.calibration-overlay-content-wrapper .primary-button {
  margin-top: 1.5rem;
  z-index: 10; /* Stack above other elements within the wrapper */
  background: var(--dim-button-bg-on-dark);
  color: var(--dim-button-text-on-dark);
  border: 1px solid var(--dim-button-text-on-dark);
}
.calibration-overlay-content-wrapper .primary-button:hover {
  background: var(--dim-button-hover-bg-on-dark);
}
.calibration-overlay-content-wrapper .primary-button:disabled {
  opacity: 0.5;
  background: var(--dim-button-bg-on-dark); /* Keep style consistent for disabled */
  color: var(--dim-button-text-on-dark);
  border-color: var(--dim-button-text-on-dark);
}

.calibration-overlay-content-wrapper .calibration-toggle-button {
  background: var(--secondary-button-bg);
  color: white;
  border: none;
  margin-top: 15px; /* MODIFIED: Moved from the less specific rule, !important removed */
  position: relative; /* Ensure positioning context for z-index */
  z-index: 10;      /* MODIFIED: Ensure it stacks like the primary button within the wrapper */
}
.calibration-overlay-content-wrapper .calibration-toggle-button:hover {
  background: var(--secondary-button-hover-bg);
}

/* Removed separate .calibration-toggle-button { margin-top: 15px !important; } rule */

/* Styles for light mode within calibration overlay */
.calibration-overlay-content-wrapper.light-mode-active h3 {
  color: var(--text);
}
.calibration-overlay-content-wrapper.light-mode-active p,
.calibration-overlay-content-wrapper.light-mode-active .calibration-feedback p {
  color: #333333; /* Consider using var(--text) or a new variable if #333 is common */
}
.calibration-overlay-content-wrapper.light-mode-active .calibration-feedback strong {
  color: var(--text);
}
.calibration-overlay-content-wrapper.light-mode-active .warning-text {
  color: var(--warning);
}
.calibration-overlay-content-wrapper.light-mode-active .error-message {
  background: color-mix(in srgb, var(--warning) 20%, transparent);
  color: var(--warning);
  border: 1px solid var(--warning);
}

.calibration-overlay-content-wrapper.light-mode-active .primary-button {
  background: var(--primary);
  color: white;
  border: none; /* Ensure border is reset if the dark mode one added one */
}
.calibration-overlay-content-wrapper.light-mode-active .primary-button:hover {
  background: var(--primary-dark);
  color: white; /* Ensure text color remains white on hover */
}
.calibration-overlay-content-wrapper.light-mode-active .primary-button:disabled {
  background: var(--primary); /* Keep style consistent for disabled */
  color: white;
  opacity: 0.6;
}

.calibration-overlay-content-wrapper.light-mode-active .calibration-toggle-button {
  background: var(--secondary-button-bg);
  color: white;
  border: none; /* Ensure border is reset if applicable */
}
.calibration-overlay-content-wrapper.light-mode-active .calibration-toggle-button:hover {
  background: var(--secondary-button-hover-bg);
}

.calibration-overlay-content-wrapper.light-mode-active .light-mode-remark {
  color: var(--text);
  font-size: 0.9rem;
  margin-top: 1rem;
  margin-bottom: 0.5rem;
  max-width: 80%;
  line-height: 1.5;
  text-align: center;
}
.calibration-overlay-content-wrapper.light-mode-active .light-mode-remark strong {
  color: var(--primary-dark);
}

/* Styles for other steps */
.intro-step {
  text-align: center;
  width: 100%;
}
.memory-number {
  font-size: 2.5rem;
  font-weight: bold;
  color: var(--primary);
  margin: 1rem auto;
  padding: 1rem;
  background: #f0f4ff; /* Consider a variable if this color is reused */
  border-radius: 8px;
  display: inline-block;
}

.preparation-step {
  padding-bottom: 20px;
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center; /* Added for consistency if inner elements aren't full width */
  width: 100%;
}
.instructions {
  text-align: left;
  margin: 1.5rem auto;
  padding-left: 1.5rem; /* Or use padding on li for better bullet alignment */
  max-width: 95%;
}
.instructions li {
  margin-bottom: 0.8rem;
  line-height: 1.5;
}
.instructions ul {
    margin-top: 0.5rem;
    padding-left: 1rem; /* Adjust if bullet alignment needs fixing */
}
.start-button { /* This class is used in JS but not styled here, assuming it gets .primary-button */
  width: auto;
  min-width: 200px;
}

.error-message { /* General error message styling */
  background: color-mix(in srgb, var(--warning) 20%, transparent);
  color: var(--warning);
  padding: 1rem;
  border-radius: 8px;
  text-align: center;
  margin: 1rem auto;
  width: 90%;
  max-width: 500px;
  box-sizing: border-box;
}

.testing-step { /* Placeholder for when testing UI is active but no overlay */
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 100%;
  min-height: 200px; /* Example height */
}

.recall-step {
  text-align: center;
  padding: 1rem 0;
  width: 100%;
}
.recall-step h3 {
  margin-bottom: 1rem;
  color: var(--text);
}
.recall-step p {
  margin: 1.5rem auto; /* Increased top/bottom margin for spacing */
  color: #555; /* Consider var(--text-secondary) or similar */
  max-width: 90%;
}
.recall-task {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.8rem;
  margin-top: 1rem;
}
.recall-task input {
  padding: 0.8rem;
  border: 1px solid var(--border);
  border-radius: 8px;
  font-size: 1rem;
  width: 100%;
  max-width: 250px;
  box-sizing: border-box;
  text-align: center;
}

.results-step {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  width: 100%;
  padding-top: 1rem;
}

.results-summary-card { 
  background: var(--background); 
  padding: 1.5rem;
  border-radius: 8px;
  width: 100%; /* Ensure it can shrink if needed, max-width controls size */
  max-width: 500px;
  margin-left: auto;
  margin-right: auto;
  box-sizing: border-box;
  box-shadow: 0 2px 6px rgba(0,0,0,0.05);
}

.results-summary-card h4 {
    margin-top: 0;
    margin-bottom: 0.5rem; 
    color: var(--primary-dark);
    text-align: center;
    font-size: 1.3rem;
}

.interpretation {
  color: #555; /* Consider var(--text-secondary) */
  line-height: 1.6;
  margin-top: 0.5rem; 
  font-size: 0.9rem;
  text-align: left;
  max-width: 100%; /* Should be fine as it's constrained by parent */
}
.interpretation p {
  margin: 0.6rem 0;
}
.interpretation strong {
    color: var(--text);
}
.interpretation em {
    font-size: 0.85rem;
    color: #777; /* Consider var(--text-tertiary) or similar */
}

/* --- Gauge Styles --- */
.gauge-container {
  width: 220px; 
  height: 140px;
  margin: 1rem auto; 
  position: relative; 
}

.gauge-arc-background {
  width: 200px;
  height: 100px;
  border-radius: 100px 100px 0 0;
  background-color: #ddd; /* Fallback/base color for the track */
  overflow: hidden;
  position: absolute;
  top: 0;
  left: 50%;
  transform: translateX(-50%);
  display: flex;
  box-shadow: inset 0px 2px 4px rgba(0,0,0,0.07);
}

.gauge-segment {
  height: 100%;
  flex: 0 0 auto;
  /* border-right: 1px solid rgba(0,0,0,0.1); /* Removed, can make segments look uneven */
}
/* Add border back if segments truly need visual separation beyond color */
/* .gauge-segment:not(:last-child) {
  border-right: 1px solid rgba(0,0,0,0.1);
} */


.gauge-needle {
  width: 3px; 
  height: 100px;
  background-color: #2c3e50; /* Consider var(--text-strong) or similar */
  position: absolute;
  bottom: 40px;
  left: 50%; 
  transform-origin: 50% 100%;
  border-radius: 1.5px 1.5px 0 0;
  box-shadow: 0 0 2px rgba(0,0,0,0.2);
  transition: transform 0.6s cubic-bezier(0.68, -0.55, 0.27, 1.55); 
  z-index: 2; /* Above segments, below center circle if needed */
}

.gauge-center-circle {
  width: 12px; 
  height: 12px;
  background-color: #34495e; /* Consider var(--text-strong) or similar */
  border-radius: 50%;
  position: absolute;
  bottom: 34px;
  left: 50%;
  transform: translateX(-50%);
  z-index: 3; /* On top of needle and segments */
  border: 2px solid var(--card-bg); 
}

.gauge-value-display {
  position: absolute;
  top: 35px;
  left: 50%;
  transform: translateX(-50%);
  font-size: 1.5rem; 
  font-weight: 600; 
  color: var(--text);
  z-index: 1; /* Behind needle if they overlap, or adjust top position */
}

.gauge-labels {
  display: flex;
  justify-content: space-between;
  width: 200px;
  font-size: 0.7rem; 
  color: #555; /* Consider var(--text-secondary) */
  position: absolute;
  top: 102px;
  left: 50%;
  transform: translateX(-50%);
  padding: 0 5px; 
  box-sizing: border-box;
}
.gauge-labels span {
  flex: 1;
  text-align: center;
}
.gauge-labels span:first-child { text-align: left; }
.gauge-labels span:last-child { text-align: right; }

.gauge-category-label {
  font-size: 0.9rem; 
  font-weight: 500;
  text-align: center;
  position: absolute;
  top: 120px;
  left: 0;
  right: 0; 
  width: 100%; 
}

/* Metrics Grid for Results */
.metrics-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
  gap: 1rem;
  width: 100%;
}
.metric-card {
  background: var(--background);
  padding: 1rem;
  border-radius: 8px;
  border-left: 4px solid var(--primary);
}
.metric-card h4 {
  margin-top: 0;
  margin-bottom: 0.8rem;
  color: var(--primary);
}
.metric-row {
  display: flex;
  justify-content: space-between;
  margin: 0.5rem 0;
  font-size: 0.9rem;
  color: #444; /* Consider var(--text) or var(--text-secondary) */
}
.metric-row span:first-child {
  font-weight: 500;
}
.metric-row.highlight {
  font-weight: bold;
  color: var(--primary);
  font-size: 1rem;
}

/* Feedback messages (e.g., recall correct/incorrect) */
.feedback {
  padding: 0.8rem;
  border-radius: 8px;
  text-align: center;
  font-weight: bold;
  margin: 0.5rem auto;
  max-width: 90%;
}
.feedback.correct {
  background: color-mix(in srgb, var(--correct) 20%, transparent);
  color: var(--correct);
}
.feedback.incorrect {
  background: color-mix(in srgb, var(--incorrect) 20%, transparent);
  color: var(--incorrect);
}
.results-step > .primary-button { /* To center the final complete button */
  align-self: center;
}

/* --- Mobile Overrides --- */
@media (max-width: 768px) {
  .pupil-test-container {
    margin: 0.5rem;
    padding: 1rem;
    max-height: none; /* Allow full scroll on mobile */
  }
  .metrics-grid { /* In results */
    grid-template-columns: 1fr;
  }

  /* Calibration Overlay on Mobile */
  .calibration-overlay-content-wrapper {
    padding: 1rem; /* Reduce padding on smaller screens */
    gap: 0.8rem;   /* Reduce gap on smaller screens */
  }
  .calibration-overlay-content-wrapper h3 {
    font-size: 1.4rem;
  }
  .calibration-overlay-content-wrapper p {
    font-size: 0.9rem;
    max-width: 90%; /* Allow slightly more width for text */
  }
  .ring-indicator {
    width: 120px; /* Smaller ring */
    height: 120px;
    margin-top: 0.5rem;
    margin-bottom: 0.5rem;
  }
  .live-feedback {
    font-size: 0.8rem;
    padding: 0.3rem 0.7rem;
  }
  .error-message.overlay-error {
    bottom: 60px; /* Adjust position */
    font-size: 0.85rem;
  }
  .calibration-overlay-content-wrapper .primary-button,
  .calibration-overlay-content-wrapper .calibration-toggle-button {
    font-size: 0.9rem;
    padding: 0.7rem 1.2rem;
  }


  .results-summary-card { 
    max-width: 100%; /* Allow full width if needed */
  }

  /* Gauge on Mobile */
  .gauge-container {
    width: 100%; 
    max-width: 180px; /* Further reduce max width for smaller mobiles */
    height: auto; 
    min-height: 120px; /* Adjust min height */
    margin-bottom: 1.5rem; 
  }
  .gauge-arc-background { 
    width: 100%; /* Make arc responsive to container */
    height: 0; 
    padding-bottom: 50%; /* Maintain 2:1 aspect ratio for semicircle */
    position: relative; 
    top: 0;
    left: 0; 
    transform: none;
  }
  /* Segments will fill this proportionally */

  .gauge-needle {
    height: calc(100% - 5px); /* Needle relative to arc height */
    bottom: auto; 
    top: 2.5px; /* Small offset from top of arc */
    left: 50%;
    transform-origin: 50% 100%; /* Pivot from bottom center of needle */
  }
  .gauge-center-circle {
    width: 10px;
    height: 10px;
    bottom: auto;
    top: calc(100% - 5px); /* Position at base of needle */
    left: 50%;
    transform: translateX(-50%);
  }
  .gauge-value-display {
    font-size: 1.1rem; /* Smaller text */
    top: 35%; /* Adjust vertical position within arc */
  }
  .gauge-labels {
    width: 100%; 
    font-size: 0.65rem;
    top: auto; 
    bottom: 10px; /* Position below arc */
    left: 0;
    transform: none;
    padding: 0 2px;
  }
  .gauge-category-label {
    top: auto;
    bottom: -5px; /* Position below numeric labels */
    font-size: 0.8rem;
  }
}

/* Additional fine-tuning for very small screens if necessary */
@media (max-width: 400px) {
  .calibration-overlay-content-wrapper h3 {
    font-size: 1.2rem;
  }
  .calibration-overlay-content-wrapper p {
    font-size: 0.8rem;
  }
  .ring-indicator {
    width: 100px;
    height: 100px;
  }
  .gauge-container {
    max-width: 160px;
    min-height: 110px;
  }
  .gauge-value-display {
    font-size: 1rem;
  }
   .gauge-labels {
    font-size: 0.6rem;
    bottom: 5px;
  }
  .gauge-category-label {
    font-size: 0.75rem;
    bottom: -8px;
  }
}

/* === Add these styles to your PupilTest.css === */

/* Styles for PerformanceScale (adapted for PupilTest) */
.performance-scale-container {
  width: 100%;
  margin-bottom: 1.5rem; /* Adjusted margin */
  padding: 1rem 1.5rem; /* Adjusted padding */
  background-color: var(--background); 
  border-radius: 8px;
  box-shadow: 0 2px 6px rgba(0,0,0,0.05);
  box-sizing: border-box;
}

.performance-scale-container h4 {
  margin-top: 0;
  margin-bottom: 1rem; /* Increased margin */
  color: var(--primary-dark);
  font-size: 1.2rem; /* Slightly larger */
  text-align: center;
  font-weight: 500;
}

/* Ensure the wrapper has space (this should be okay from previous step) */
.scale-bar-wrapper {
  position: relative;
  width: 100%; 
  max-width: 400px; 
  margin: 0 auto;
  padding-top: 25px;    /* Space for the pointer above the bar */
  padding-bottom: 35px; /* Space for thresholds below the bar */
  box-sizing: border-box;
}

/* The scale bar itself needs to be positioned within the new padding */
.scale-bar {
  width: 100%;
  height: 22px; 
  background-color: #e9ecef; 
  display: flex;
  border-radius: 6px; 
  overflow: hidden;
  border: 1px solid var(--border);
  /* NEW: Ensure it's not at the very top of the wrapper if pointer is positioned from wrapper's top:0 */
  /* No, this is fine, the pointer is absolute. The wrapper's padding-top handles the space. */
}

.scale-segment {
  height: 100%;
  /* transition: width 0.3s ease-in-out; */ /* Optional */
}
.scale-segment:first-child {
  border-top-left-radius: 5px;
  border-bottom-left-radius: 5px;
}
.scale-segment:last-child {
  border-top-right-radius: 5px;
  border-bottom-right-radius: 5px;
}


.scale-pointer {
  position: absolute;
  top: 0; 
  font-size: 24px; /* Or your desired size for the arrow */
  color: var(--text); 

  /* OLD: transform: translateX(-50%) translateY(-12px) rotate(180deg); */
  /* NEW: Remove rotate(180deg) if '▼' should point down towards the bar */
  transform: translateX(-50%) translateY(-12px); /* Adjust -12px as needed */
  
  /* If you actually want an UPWARD pointing arrow character like '▲' (Black Up-Pointing Triangle) 
     and have it sit above the bar, then you would use '▲' in the JSX
     and the transform would be:
     transform: translateX(-50%) translateY(calc(100% - 12px)); /* Example to position base of ▲ above bar */
     /* OR, if using '▼' and wanting it to flip to point up AND sit above:
     transform: translateX(-50%) translateY(-12px) rotate(180deg); /* This was the previous state */

  transform-origin: center center; /* Keep this for consistent rotation if ever re-added */
  line-height: 1;
  transition: left 0.4s cubic-bezier(0.68, -0.55, 0.27, 1.55); 
  z-index: 2;
  text-shadow: 0 1px 2px rgba(0,0,0,0.1);
}

.scale-thresholds {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 20px; 
  display: flex; /* Will be positioned absolutely by children */
  font-size: 0.8rem; 
  color: #555; /* Darker for better contrast */
}

.scale-threshold-label {
  position: absolute;
  bottom: 0;
  transform: translateX(-50%); 
  white-space: nowrap;
  padding-top: 5px; /* Space above the label */
}

/* Specific adjustments for min/max labels to align with scale ends */
.scale-thresholds span.scale-threshold-label[style*="left: 0%"] {
  transform: translateX(0%);
}
.scale-thresholds span.scale-threshold-label[style*="right: 0%"] {
  transform: translateX(50%); /* This was in HandResults, ensure it aligns correctly */
}


.scale-analysis-comment {
  margin-top: 1rem; /* Increased space */
  font-size: 0.95rem; /* Slightly larger */
  color: var(--text); /* Use primary text color */
  text-align: center;
  padding: 0 0.5rem;
  line-height: 1.6;
}

/* Ensure summary card has enough space if the scale is inside it */
.results-summary-card {
  padding-bottom: 1.5rem; /* Add padding if scale is last element */
}

/* Styles for the new AutoCalibrationCheckOverlayUI buttons if needed */
.calibration-overlay-content-wrapper .secondary-button {
  /* Styles from your original CSS for secondary buttons in overlays */
  background: var(--dim-button-bg-on-dark);
  color: var(--dim-button-text-on-dark);
  border: 1px solid var(--dim-button-text-on-dark);
  transition: background-color 0.2s, transform 0.2s;
}
.calibration-overlay-content-wrapper .secondary-button:hover {
  background: var(--dim-button-hover-bg-on-dark);
}

/* Ensure the ring indicator and pupil dot are visible on dark overlay */
.full-black-overlay .ring-indicator {
  border-color: rgba(200, 200, 200, 0.35); /* Lighter ring for dark bg */
}
.full-black-overlay .pupil-dot {
  /* The current style makes it blend, which is intended for just the ring focus */
  /* background: var(--dark-overlay-bg); */ 
}

/* General overlay text on dark background */
.full-black-overlay .overlay-text,
.full-black-overlay .calibration-overlay-content-wrapper h3,
.full-black-overlay .calibration-overlay-content-wrapper p {
  color: var(--dim-overlay-text-primary); /* Ensure text is light */
}
.full-black-overlay .calibration-overlay-content-wrapper strong {
  color: var(--dim-overlay-text-secondary); /* Slightly brighter for emphasis */
}
.full-black-overlay .calibration-overlay-content-wrapper .warning-text {
    color: var(--dim-warning-text-on-dark);
}
.full-black-overlay .calibration-overlay-content-wrapper .error-message {
    background: rgba(210, 140, 60, 0.15);
    border: 1px solid var(--dim-warning-text-on-dark);
    color: var(--dim-warning-text-on-dark);
}